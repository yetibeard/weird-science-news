---
interface Props {
  currentSlug: string;
  tags: string[];
}

const { currentSlug, tags } = Astro.props;

// Get all articles
const postImports = import.meta.glob("../content/*.md", { eager: true });
const allPosts = Object.entries(postImports).map(([path, post]) => ({
  ...(post as any).frontmatter,
  slug: path.split("/").pop().replace(".md", ""),
}));

// Filter out current article and find related ones based on tags
const relatedPosts = allPosts
  .filter(post => post.slug !== currentSlug) // Remove current article
  .map(post => ({
    ...post,
    // Count matching tags
    matchingTags: tags.filter(tag => post.tags.includes(tag)).length,
  }))
  .filter(post => post.matchingTags > 0) // Only keep posts with at least one matching tag
  .sort((a, b) => b.matchingTags - a.matchingTags) // Sort by number of matching tags
  .slice(0, 3); // Get top 3 related articles
---

{relatedPosts.length > 0 && (
  <div class="border-t border-gray-200 dark:border-gray-700 mt-8 pt-8">
    <h2 class="text-2xl font-bold mb-6 text-gray-900 dark:text-gray-100">
      More Weird Science
    </h2>
    
    <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
      {relatedPosts.map((post) => (
        <a 
          href={`/posts/${post.slug}`}
          class="group block bg-white dark:bg-gray-800 rounded-lg shadow-sm hover:shadow-md transition-shadow p-4"
        >
          <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 group-hover:text-blue-600 dark:group-hover:text-blue-400 mb-2">
            {post.title}
          </h3>
          <p class="text-sm text-gray-600 dark:text-gray-400 mb-2 line-clamp-2">
            {post.summary}
          </p>
          <div class="flex flex-wrap gap-2">
            {post.tags.filter(tag => tags.includes(tag)).map(tag => (
              <span class="text-xs px-2 py-1 bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 rounded-full">
                {tag}
              </span>
            ))}
          </div>
        </a>
      ))}
    </div>
  </div>
)}
